<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yinmimoney.web.p2pnew.dao.LikeLogMapper" >
  <resultMap id="BaseResultMap" type="com.yinmimoney.web.p2pnew.pojo.LikeLog" extends="associationMap">
	<id column="id" property="id" />
	<result column="user_code" property="userCode" />
	<result column="city_code" property="cityCode" />
	<result column="chat_code" property="chatCode" />
	<result column="is_valid" property="isValid" />
	<result column="add_time" property="addTime" />
  </resultMap>
  <sql id="Base_Column_List" >
		`id`
		,`user_code`
		,`city_code`
		,`chat_code`
		,`is_valid`
		,`add_time`
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `like_log`
    WHERE `id` = #{id}
  </select>
  <select id="getByCondition" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `like_log`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
	LIMIT 1
  </select>
  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.Map">
    SELECT ${aggregate_sql} FROM `like_log`
    <include refid="map_params_where_condition" />
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    DELETE FROM `like_log`
    WHERE `id` = #{id}
  </delete>
  <insert id="insert" parameterType="com.yinmimoney.web.p2pnew.pojo.LikeLog" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `like_log` (
	  `user_code`
	  ,`city_code`
	  ,`chat_code`
	  ,`is_valid`
	  ,`add_time`
      )
    VALUES (
		  
		  #{userCode}
		  ,
		  #{cityCode}
		  ,
		  #{chatCode}
		  ,
		  #{isValid}
		  ,
		  #{addTime}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yinmimoney.web.p2pnew.pojo.LikeLog" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `like_log`
    <trim prefix="(" suffix=")" suffixOverrides="," >
		  <if test="userCode != null" >
			`user_code`,
		  </if>
		  <if test="cityCode != null" >
			`city_code`,
		  </if>
		  <if test="chatCode != null" >
			`chat_code`,
		  </if>
		  <if test="isValid != null" >
			`is_valid`,
		  </if>
		  <if test="addTime != null" >
			`add_time`,
		  </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
		  <if test="userCode != null" >
			#{userCode},
		  </if>
		  <if test="cityCode != null" >
			#{cityCode},
		  </if>
		  <if test="chatCode != null" >
			#{chatCode},
		  </if>
		  <if test="isValid != null" >
			#{isValid},
		  </if>
		  <if test="addTime != null" >
			#{addTime},
		  </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yinmimoney.web.p2pnew.pojo.LikeLog" >
    UPDATE `like_log`
    <set >
	  <if test="userCode != null" >
        `user_code` = #{userCode},
      </if>
	  <if test="cityCode != null" >
        `city_code` = #{cityCode},
      </if>
	  <if test="chatCode != null" >
        `chat_code` = #{chatCode},
      </if>
	  <if test="isValid != null" >
        `is_valid` = #{isValid},
      </if>
	  <if test="addTime != null" >
        `add_time` = #{addTime},
      </if>
    </set>
    WHERE `id` = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yinmimoney.web.p2pnew.pojo.LikeLog" >
	UPDATE `like_log` SET
        `user_code` = #{userCode},
        `city_code` = #{cityCode},
        `chat_code` = #{chatCode},
        `is_valid` = #{isValid},
        `add_time` = #{addTime}
    WHERE `id` = #{id}
  </update>
  <update id="updateByCondition" parameterType="java.util.Map" >
    UPDATE `like_log`
    <set>
	  <if test="entity.userCode != null" >
        `user_code` = #{entity.userCode},
      </if>
	  <if test="entity.cityCode != null" >
        `city_code` = #{entity.cityCode},
      </if>
	  <if test="entity.chatCode != null" >
        `chat_code` = #{entity.chatCode},
      </if>
	  <if test="entity.isValid != null" >
        `is_valid` = #{entity.isValid},
      </if>
	  <if test="entity.addTime != null" >
        `add_time` = #{entity.addTime},
      </if>
      <foreach collection="entity.nullColums" item="nullColum">
        `${nullColum}` = NULL,
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <update id="updateIncreateNumbers" parameterType="java.util.Map" >
    UPDATE `like_log`
    <set>
      <foreach collection="increateNumbers" item="numberCloums">
        `${numberCloums.column}` = `${numberCloums.column}` + #{numberCloums.number},
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <sql id="map_params_where_condition" >
    <trim prefix="WHERE" prefixOverrides="AND">
	  <if test="id != null" >
        AND `id` = #{id}
	  </if>
	  <if test="userCode != null" >
        AND `user_code` = #{userCode}
	  </if>
	  <if test="cityCode != null" >
        AND `city_code` = #{cityCode}
	  </if>
	  <if test="chatCode != null" >
        AND `chat_code` = #{chatCode}
	  </if>
	  <if test="isValid != null" >
        AND `is_valid` = #{isValid}
	  </if>
	  <if test="addTime != null" >
        AND `add_time` = #{addTime}
	  </if>
	  <if test="condition != null">
	  <if test="condition.id != null" >
        AND `id` = #{condition.id}
	  </if>
	  <if test="condition.userCode != null" >
        AND `user_code` = #{condition.userCode}
	  </if>
	  <if test="condition.cityCode != null" >
        AND `city_code` = #{condition.cityCode}
	  </if>
	  <if test="condition.chatCode != null" >
        AND `chat_code` = #{condition.chatCode}
	  </if>
	  <if test="condition.isValid != null" >
        AND `is_valid` = #{condition.isValid}
	  </if>
	  <if test="condition.addTime != null" >
        AND `add_time` = #{condition.addTime}
	  </if>
	  </if>
	  <if test="vo != null and !vo.expressionChainList.empty">
        AND
        <foreach collection="vo.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <if test="expressionChainList != null and !expressionChainList.empty">
        AND
        <foreach collection="expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <include refid="map_params_where_condition_ext" />
    </trim>
  </sql>
  <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM `like_log`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
    <if test="pageBeginIndex != null and pageSize != null" >
      LIMIT #{pageBeginIndex},#{pageSize}
    </if>
    <if test="pageBeginIndex == null and pageSize != null" >
      LIMIT #{pageSize}
    </if>
    <if test="pageBeginIndex != null and pageSize == null" >
      LIMIT #{pageBeginIndex}
    </if>
  </select>
  <delete id="delete" parameterType="java.util.Map" >
    DELETE
    FROM `like_log`
    <include refid="map_params_where_condition" />
  </delete>
  <select id="getCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(1)
    FROM `like_log`
    <include refid="map_params_where_condition" />
  </select>
</mapper>